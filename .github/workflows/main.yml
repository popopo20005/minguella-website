name: Auto Update Minguella Homepage

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check Minguella app
      id: check-app
      run: |
        echo "Checking Minguella app..."
        
        # アプリのHTMLを取得
        curl -s https://minguella-quiz-v4.netlify.app > app.html
        echo "HTML downloaded"
        
        # タイトルからバージョンを抽出
        TITLE=$(grep -o '<title[^>]*>[^<]*</title>' app.html | sed 's/<[^>]*>//g')
        echo "App title: $TITLE"
        
        # バージョン番号を抽出
        VERSION=$(echo "$TITLE" | grep -o 'v[0-9]\.[0-9]\.[0-9]' | head -1 | sed 's/v//')
        if [ -z "$VERSION" ]; then
          VERSION="1.4.0"
        fi
        echo "Current version: $VERSION"
        
        # 前回のバージョンをチェック
        if [ -f version.txt ]; then
          OLD_VERSION=$(cat version.txt)
        else
          OLD_VERSION="1.0.0"
        fi
        echo "Previous version: $OLD_VERSION"
        
        # バージョンを保存
        echo "$VERSION" > version.txt
        
        # 変更チェック
        if [ "$OLD_VERSION" != "$VERSION" ]; then
          echo "has_update=true" >> $GITHUB_OUTPUT
          echo "Version changed: $OLD_VERSION to $VERSION"
        else
          echo "has_update=false" >> $GITHUB_OUTPUT
          echo "No version change"
        fi
        
        echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
        echo "new_version=$VERSION" >> $GITHUB_OUTPUT
        
        # 一時ファイル削除
        rm -f app.html
        
    - name: Update homepage
      if: steps.check-app.outputs.has_update == 'true'
      run: |
        echo "Updating homepage..."
        OLD_VER="${{ steps.check-app.outputs.old_version }}"
        NEW_VER="${{ steps.check-app.outputs.new_version }}"
        
        # HTMLファイルのバージョンを更新
        sed -i "s/v[0-9]\.[0-9]\.[0-9]/v$NEW_VER/g" index.html
        echo "Homepage updated to v$NEW_VER"
        
    - name: Send notification
      run: |
        echo "Sending notification..."
        OLD_VER="${{ steps.check-app.outputs.old_version }}"
        NEW_VER="${{ steps.check-app.outputs.new_version }}"
        
        if [ "${{ steps.check-app.outputs.has_update }}" == "true" ]; then
          MESSAGE="🚀 Minguellaアプリが更新されました！ v$OLD_VER → v$NEW_VER"
        else
          MESSAGE="✅ Minguella定期チェック完了 (v$NEW_VER)"
        fi
        
        # Slack通知
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$MESSAGE\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
          echo "Slack notification sent"
        fi
        
        # Discord通知
        if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"username\":\"Minguella Bot\",\"content\":\"$MESSAGE\"}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
          echo "Discord notification sent"
        fi
        
    - name: Commit changes
      if: steps.check-app.outputs.has_update == 'true'
      run: |
        git config --global user.name 'Minguella Auto-Update Bot'
        git config --global user.email 'actions@github.com'
        git add .
        git commit -m "Auto-update to v${{ steps.check-app.outputs.new_version }}"
        git push
        echo "Changes committed"
        
    - name: Summary
      run: |
        echo "## Minguella監視結果" >> $GITHUB_STEP_SUMMARY
        echo "- 日時: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- バージョン: v${{ steps.check-app.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.check-app.outputs.has_update }}" == "true" ]; then
          echo "- ステータス: 🚀 更新検出" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ステータス: ✅ 変更なし" >> $GITHUB_STEP_SUMMARY
        fi
