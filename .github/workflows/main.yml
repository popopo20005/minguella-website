# .github/workflows/auto-update.yml
name: Auto Update Minguella Homepage

on:
  schedule:
    # 毎日 9:00 (JST) にチェック
    - cron: '0 0 * * *'
  workflow_dispatch:
    # 手動実行も可能
    inputs:
      force_update:
        description: 'Force update even if no changes detected'
        required: false
        default: 'false'

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install node-fetch cheerio
        
    - name: Check Minguella app for updates
      id: check-app
      run: |
        node << 'EOF'
        const fetch = require('node-fetch');
        const fs = require('fs');
        const cheerio = require('cheerio');
        
        async function checkAppUpdates() {
          try {
            // Minguellaアプリのページをチェック
            const response = await fetch('https://minguella-quiz-v4.netlify.app');
            const html = await response.text();
            const $ = cheerio.load(html);
            
            // アプリのバージョン情報を取得（タイトルや特定の要素から）
            const title = $('title').text();
            const version = title.match(/v([\d.]+)/)?.[1] || '1.4.0';
            
            // 現在のバージョンを確認
            const currentData = fs.existsSync('app-info.json') 
              ? JSON.parse(fs.readFileSync('app-info.json', 'utf8'))
              : { version: '1.4.0', lastChecked: new Date().toISOString() };
            
            const newData = {
              version: version,
              lastChecked: new Date().toISOString(),
              appUrl: 'https://minguella-quiz-v4.netlify.app',
              features: await extractFeatures($)
            };
            
            // バージョンが変更されたかチェック
            const hasUpdate = currentData.version !== newData.version || 
                            process.env.GITHUB_EVENT_NAME === 'workflow_dispatch';
            
            // 結果を保存
            fs.writeFileSync('app-info.json', JSON.stringify(newData, null, 2));
            
            // GitHub Actions出力
            console.log(`::set-output name=has_update::${hasUpdate}`);
            console.log(`::set-output name=old_version::${currentData.version}`);
            console.log(`::set-output name=new_version::${newData.version}`);
            console.log(`::set-output name=features::${JSON.stringify(newData.features)}`);
            
            if (hasUpdate) {
              console.log(`🚀 Update detected: v${currentData.version} → v${newData.version}`);
            } else {
              console.log(`✅ No updates found (current: v${newData.version})`);
            }
          } catch (error) {
            console.error('Error checking app:', error);
            process.exit(1);
          }
        }
        
        async function extractFeatures($) {
          // アプリの機能一覧を抽出（実際のHTMLの構造に合わせて調整）
          const features = [];
          
          // 例: メタタグやコンテンツから機能を抽出
          $('meta[name="description"]').each((i, el) => {
            const content = $(el).attr('content');
            if (content) features.push(content);
          });
          
          return features.length > 0 ? features : [
            'クイズ機能', '学習分析', 'PWA対応', 'オフライン利用'
          ];
        }
        
        checkAppUpdates();
        EOF
        
    - name: Update homepage if changes detected
      if: steps.check-app.outputs.has_update == 'true'
      run: |
        node << 'EOF'
        const fs = require('fs');
        
        function updateHomepage() {
          const newVersion = process.env.NEW_VERSION;
          const oldVersion = process.env.OLD_VERSION;
          const features = JSON.parse(process.env.FEATURES || '[]');
          
          // index.htmlを読み込み
          let html = fs.readFileSync('index.html', 'utf8');
          
          // バージョン番号を更新
          html = html.replace(/v[\d.]+/g, `v${newVersion}`);
          
          // 更新日時を追加
          const updateInfo = `
          <!-- Last updated: ${new Date().toISOString()} -->
          <!-- Auto-updated from v${oldVersion} to v${newVersion} -->`;
          
          html = html.replace('</head>', `${updateInfo}\n</head>`);
          
          // 更新履歴セクションを追加/更新
          const updateSection = `
    <!-- Update History Section -->
    <section class="updates" style="padding: 40px 0; background: #f0f8ff;">
        <div class="container">
            <h2 class="section-title">📝 更新情報</h2>
            <div class="update-item" style="background: white; padding: 20px; border-radius: 10px; margin: 20px 0; box-shadow: 0 4px 15px rgba(0,0,0,0.1);">
                <h3 style="color: #667eea; margin-bottom: 10px;">🆕 v${newVersion} (${new Date().toLocaleDateString('ja-JP')})</h3>
                <p style="color: #666; margin-bottom: 10px;">アプリが自動更新されました！</p>
                <ul style="color: #555;">
                    ${features.slice(0, 3).map(f => `<li>${f}</li>`).join('')}
                </ul>
                <p style="margin-top: 10px;"><a href="https://minguella-quiz-v4.netlify.app" target="_blank" class="btn btn-primary">🚀 新バージョンを試す</a></p>
            </div>
        </div>
    </section>`;
          
          // 質問箱セクションの前に挿入
          html = html.replace('<!-- Question Box Section -->', `${updateSection}\n    <!-- Question Box Section -->`);
          
          // ファイルに書き戻し
          fs.writeFileSync('index.html', html);
          
          console.log(`✅ Homepage updated to v${newVersion}`);
        }
        
        updateHomepage();
        EOF
      env:
        NEW_VERSION: ${{ steps.check-app.outputs.new_version }}
        OLD_VERSION: ${{ steps.check-app.outputs.old_version }}
        FEATURES: ${{ steps.check-app.outputs.features }}
        
    - name: Send update notification
      if: steps.check-app.outputs.has_update == 'true'
      run: |
        node << 'EOF'
        const fetch = require('node-fetch');
        
        async function sendNotifications() {
          const newVersion = process.env.NEW_VERSION;
          const oldVersion = process.env.OLD_VERSION;
          
          // Slack通知
          if (process.env.SLACK_WEBHOOK_URL) {
            const slackMessage = {
              text: "🚀 Minguellaアプリが自動更新されました！",
              blocks: [
                {
                  type: "header",
                  text: {
                    type: "plain_text",
                    text: "🤖 自動更新システム"
                  }
                },
                {
                  type: "section",
                  fields: [
                    {
                      type: "mrkdwn",
                      text: `*旧バージョン:*\nv${oldVersion}`
                    },
                    {
                      type: "mrkdwn", 
                      text: `*新バージョン:*\nv${newVersion}`
                    }
                  ]
                },
                {
                  type: "section",
                  text: {
                    type: "mrkdwn",
                    text: `*ホームページ:* 自動更新完了\n*更新日時:* ${new Date().toLocaleString('ja-JP')}`
                  }
                },
                {
                  type: "actions",
                  elements: [
                    {
                      type: "button",
                      text: {
                        type: "plain_text",
                        text: "🌐 ホームページを確認"
                      },
                      url: process.env.SITE_URL || "https://your-site.netlify.app"
                    },
                    {
                      type: "button", 
                      text: {
                        type: "plain_text",
                        text: "🚀 アプリを開く"
                      },
                      url: "https://minguella-quiz-v4.netlify.app"
                    }
                  ]
                }
              ]
            };
            
            try {
              await fetch(process.env.SLACK_WEBHOOK_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(slackMessage)
              });
              console.log('✅ Slack notification sent');
            } catch (error) {
              console.error('❌ Slack notification failed:', error);
            }
          }
          
          // Discord通知
          if (process.env.DISCORD_WEBHOOK_URL) {
            const discordMessage = {
              username: "Minguella Auto-Update Bot",
              embeds: [{
                title: "🚀 自動更新完了！",
                color: 0x00ff00,
                fields: [
                  {
                    name: "📊 バージョン変更",
                    value: `v${oldVersion} → v${newVersion}`,
                    inline: true
                  },
                  {
                    name: "📅 更新日時",
                    value: new Date().toLocaleString('ja-JP'),
                    inline: true
                  },
                  {
                    name: "🌐 ホームページ",
                    value: "[更新完了](https://your-site.netlify.app)",
                    inline: true
                  }
                ],
                footer: {
                  text: "GitHub Actions自動更新システム"
                },
                timestamp: new Date().toISOString()
              }]
            };
            
            try {
              await fetch(process.env.DISCORD_WEBHOOK_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(discordMessage)
              });
              console.log('✅ Discord notification sent');
            } catch (error) {
              console.error('❌ Discord notification failed:', error);
            }
          }
        }
        
        sendNotifications();
        EOF
      env:
        NEW_VERSION: ${{ steps.check-app.outputs.new_version }}
        OLD_VERSION: ${{ steps.check-app.outputs.old_version }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        SITE_URL: ${{ secrets.SITE_URL }}
        
    - name: Commit and push changes
      if: steps.check-app.outputs.has_update == 'true'
      run: |
        git config --global user.name 'Minguella Auto-Update Bot'
        git config --global user.email 'actions@github.com'
        git add -A
        git commit -m "🤖 Auto-update to v${{ steps.check-app.outputs.new_version }}"
        git push
        
    - name: Create summary
      run: |
        echo "## 🤖 自動更新チェック結果" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **チェック日時**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **現在のバージョン**: v${{ steps.check-app.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **更新有無**: ${{ steps.check-app.outputs.has_update == 'true' && '✅ 更新あり' || '✅ 更新なし' }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.check-app.outputs.has_update }}" == "true" ]; then
          echo "- **変更内容**: v${{ steps.check-app.outputs.old_version }} → v${{ steps.check-app.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ホームページ**: 自動更新完了" >> $GITHUB_STEP_SUMMARY
          echo "- **通知**: Slack/Discord送信済み" >> $GITHUB_STEP_SUMMARY
        fi
